version: "3.9"
services:
  pingtest:
    hostname: 'pingtest'
    container_name: 'pingtest-saâ€™
    build: ./pingtest
    ports:
      - "12329:12329"
    networks:
      - gatednet

  mykong:
    image: kong:latest
    hostname: mykong
    container_name: mykong-sa
    restart: always
    networks:
      - kongisland
      - gatednet
    environment:
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_LISTEN_SSL: 0.0.0.0:8444
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_CASSANDRA_CONTACT_POINTS: mykongdb
      KONG_DATABASE: postgres
      KONG_PG_HOST: mykongdb
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
     #KONG_PREFIX: -/var/run/kong
    depends_on:
      - mykongdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "12322:8001"
      - "12320:8000"
      - "127.0.0.1:12321:8443/tcp"
      - "127.0.0.1:12323:8444/tcp"

  mykongdb:
    image: postgres:13.3
    hostname: mykongdb
    container_name: mykongdb-sa
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    networks:
      - kongisland
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true

  mykonga:
    image: pantsel/konga:next
    container_name: mykonga-sa
    networks:
        - kongisland
    environment:
      NODE_ENV: production
    links:
      - mykong
    ports:
      - "12324:1337"

########################
## additional kongfig ##
########################

  # Kong database migration - step 1.
  kong-migration:
    image: kong:latest
    command: kong migrations bootstrap
    networks:
      - kongisland
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: mykongdb
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      - mykongdb
    links: 
      - mykongdb
    deploy:
      restart_policy:
        condition: on-failure

  # Kong database migration- step 3.
  kong-migration-up:
    image: kong:latest
    command: kong migrations up && kong migrations finish
    networks:
      - kongisland
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: mykongdb
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      - mykongdb
    links: 
      - mykongdb
    deploy:
      restart_policy: 
        condition: on-failure
volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs

networks:
  gatednet:
    name: gatednet
    driver: bridge
  kongisland:
    name: kongisland
    driver: bridge